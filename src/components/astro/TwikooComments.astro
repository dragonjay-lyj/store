---
interface Props {
  envId: string; // 必需，Twikoo环境ID或Vercel地址
  region?: string; // 可选，Twikoo环境地域，默认为ap-shanghai
  path?: string; // 可选，用于区分不同文章的路径，默认为location.pathname
  lang?: string; // 可选，评论区语言，默认为zh-CN
  containerId?: string; // 可选，评论容器ID，默认为tcomment
  customClass?: string; // 可选的自定义样式类
  onInitSuccess?: string; // 可选的初始化成功回调（作为字符串传递给脚本）
  onInitError?: string; // 可选的初始化失败回调（作为字符串传递给脚本）
}

const { envId, region = 'ap-shanghai', path = 'location.pathname', lang = 'zh-CN', containerId = 'tcomment', customClass = '', onInitSuccess = '', onInitError = '' } = Astro.props;
---

<!-- 评论区域容器，响应式内边距，添加渐显动画 -->
<div
  id={containerId}
  class="twikoo-comments mt-4 xs:mt-6 sm:mt-8 md:mt-10 p-2 xs:p-3 sm:p-4 md:p-6 bg-white rounded-xl shadow-lg animate-fade-in max-w-full overflow-auto border border-gray-100 max-h-[80vh] ${customClass}"
  role="region"
  aria-label="Comments section powered by Twikoo"
  tabindex="0"
>
  <!-- 加载状态指示器，Twikoo初始化前显示，添加脉动效果 -->
  <div id="twikoo-loading" class="text-center text-gray-500 text-xs xs:text-sm sm:text-base py-4 flex flex-col items-center justify-center">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 xs:h-6 xs:w-6 sm:h-8 sm:w-8 md:h-10 md:w-10 animate-spin text-blue-500 mb-1 xs:mb-2 animate-pulse" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
    </svg>
    <p>正在载入评论...</p>
  </div>
  <!-- 错误提示区域，Twikoo初始化失败时显示，添加渐显效果 -->
  <div id="twikoo-error" class="text-center text-gray-500 text-xs xs:text-sm sm:text-base py-4 hidden animate-fade-in-error">
    <p>加载评论失败。请稍后再试。</p>
    <button
      id="twikoo-retry"
      class="mt-2 px-2 py-0.5 xs:px-3 xs:py-1 sm:px-4 sm:py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 text-xs xs:text-sm hover:scale-105 focus:scale-105"
      aria-label="Retry loading comments"
      tabindex="0"
    >
      重试
    </button>
  </div>
  <!-- 评论数量显示区域，初始化成功后动态更新 -->
  <div id="twikoo-count" class="text-center text-gray-500 text-xs xs:text-sm sm:text-base py-2 hidden">
    <p>评论已加载。总计 <span id="twikoo-comment-count">0</span></p>
  </div>
  <!-- Twikoo评论内容将动态插入到此容器中 -->
</div>

<!-- 加载Twikoo脚本，异步加载以提升性能 -->
<script src="https://cdn.jsdelivr.net/npm/twikoo@1.6.42/dist/twikoo.all.min.js" async defer></script>

<!-- 初始化Twikoo评论系统，添加错误处理、评论数量显示和重试机制 -->
<script define:vars={{ envId, region, path, lang, containerId, onInitSuccess, onInitError }}>
  // 页面加载完成后初始化Twikoo
  window.addEventListener('load', () => {
    const loadingEl = document.getElementById('twikoo-loading');
    const errorEl = document.getElementById('twikoo-error');
    const retryBtn = document.getElementById('twikoo-retry');
    const countEl = document.getElementById('twikoo-count');
    const commentCountEl = document.getElementById('twikoo-comment-count');

    // 初始化Twikoo函数
    const initTwikoo = () => {
      if (typeof twikoo !== 'undefined') {
        twikoo.init({
          envId: envId, // 腾讯云环境填 envId；Vercel环境填地址（如https://xxx.vercel.app）
          region: region, // 环境地域，默认为ap-shanghai，腾讯云环境填ap-shanghai或ap-guangzhou；Vercel环境不填
          el: `#${containerId}`, // 容器元素ID
          path: path, // 用于区分不同文章的自定义JS路径，默认为location.pathname
          lang: lang, // 评论区语言，默认为zh-CN，支持的语言列表见Twikoo文档
        }).then(() => {
          // 成功初始化后隐藏加载和错误提示，显示评论数量
          if (loadingEl) loadingEl.style.display = 'none';
          if (errorEl) errorEl.classList.add('hidden');
          if (countEl) {
            countEl.classList.remove('hidden');
            // 动态获取评论数量（假设Twikoo提供API，需根据实际API调整）
            try {
              twikoo.getCommentsCount().then(count => {
                if (commentCountEl) {
                  commentCountEl.textContent = count || '0';
                }
              }).catch(() => {
                if (commentCountEl) {
                  commentCountEl.textContent = 'N/A';
                }
              });
            } catch (e) {
              console.error('Failed to get comment count:', e);
              if (commentCountEl) {
                commentCountEl.textContent = 'N/A';
              }
            }
          }
          // 执行自定义成功回调
          if (onInitSuccess) {
            try {
              eval(onInitSuccess);
            } catch (e) {
              console.error('Error executing onInitSuccess callback:', e);
            }
          }
        }).catch(error => {
          console.error('Twikoo initialization failed:', error);
          if (loadingEl) loadingEl.style.display = 'none';
          if (errorEl) errorEl.classList.remove('hidden');
          if (countEl) countEl.classList.add('hidden');
          // 执行自定义错误回调
          if (onInitError) {
            try {
              eval(onInitError);
            } catch (e) {
              console.error('Error executing onInitError callback:', e);
            }
          }
        });
      } else {
        console.error('Twikoo script not loaded.');
        if (loadingEl) loadingEl.style.display = 'none';
        if (errorEl) errorEl.classList.remove('hidden');
        if (countEl) countEl.classList.add('hidden');
        // 执行自定义错误回调
        if (onInitError) {
          try {
            eval(onInitError);
          } catch (e) {
            console.error('Error executing onInitError callback:', e);
          }
        }
      }
    };

    // 初次尝试初始化
    initTwikoo();

    // 重试按钮事件监听
    if (retryBtn) {
      retryBtn.addEventListener('click', () => {
        if (loadingEl) loadingEl.style.display = 'flex';
        if (errorEl) errorEl.classList.add('hidden');
        initTwikoo();
      });
      // 键盘支持：Enter或空格键触发重试
      retryBtn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          if (loadingEl) loadingEl.style.display = 'flex';
          if (errorEl) errorEl.classList.add('hidden');
          initTwikoo();
        }
      });
    }
  });
</script>

<!-- 自定义样式，添加渐显动画和加载旋转效果，优化性能减少动画复杂度 -->
<style>
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes fade-in-error {
    from {
      opacity: 0;
      transform: translateY(5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
  }
  .animate-fade-in {
    animation: fade-in 0.6s ease-out forwards;
  }
  .animate-fade-in-error {
    animation: fade-in-error 0.4s ease-out forwards;
  }
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  .animate-pulse {
    animation: pulse 1.5s ease-in-out infinite;
  }
  /* 确保Twikoo评论内容在移动端不溢出 */
  .twikoo-comments {
    max-width: 100%;
    overflow-x: auto;
  }
  /* 加载状态居中对齐 */
  #twikoo-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  /* 在低性能设备上禁用脉动动画以提升性能 */
  @media (prefers-reduced-motion: reduce) {
    .animate-pulse {
      animation: none;
    }
  }
</style>